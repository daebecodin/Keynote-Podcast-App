schema {
    query: Query
    mutation: Mutation
}

type Query {
    person: PersonQueries
    collections: CollectionQueries
    podcasts: PodcastQueries
    keynotes: KeynoteQueries
    search: SearchQueries
}
type SearchQueries {
    searchPodcasts(
        term: String
        genres:[Genre!]
        page: Int = 0
        size: Int = 20
    ): PodcastSeriesPage!
    searchEpisodes(
        seriesUuid: ID!
        term: String
        page: Int = 0
        size: Int = 20
    ): EpisodePage
}


type Mutation {
    " add new podcast "
    addPodcast(input: AddPodcastInput!): AddPodcastPayload!
    " add new Episode "
    addEpisode(input: AddEpisodeInput!): AddEpisodePayload!
    " add new keynote "
    addKeynote(input: AddKeynoteInput!): AddKeynotePayload!

    " update existing podcast "
    updatePodcast(input: UpdatePodcastInput!): AddPodcastPayload
    " update existing episode "
    updateEpisode(input: UpdateEpisodeInput!): AddEpisodePayload
    " update existing keynote "
    updateKeynote(input: UpdateKeynoteInput!): AddKeynotePayload

    " delete existing podcast "
    deletePodcast(uuid: ID!): DeletePodcastPayload
    " delete existing episode "
    deleteEpisode(uuid: ID!): DeleteEpisodePayload
    " delete existing keynote "
    deleteKeynote(uuid: ID!): DeleteKeynotePayload
}

" update for podcast "
type UpdatePodcastPayload {
    podcast: PodcastSeries!
}
" update for keynote "
type UpdateKeynotePayload {
    keynote: Keynote!
}



